generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model access_requests {
  token      String      @id(map: "access_requests_pk") @db.VarChar(511)
  socket     String      @db.VarChar(255)
  expire_at  DateTime    @db.Timestamptz(6)
  jwt_id     Int         @unique(map: "access_requests_jwtid_unique")
  tokens     tokens      @relation(fields: [jwt_id], references: [token_id], onDelete: Cascade, map: "access_requests_tokens_null_fk")
  temp_users temp_users?
}

model temp_users {
  token           String          @id(map: "temp_users_pk") @db.VarChar(511)
  nickname        String          @db.VarChar(127)
  email           String          @db.VarChar(255)
  access_requests access_requests @relation(fields: [token], references: [token], onDelete: Cascade, map: "temp_users_access_requests_null_fk")
}

model tokens {
  token_id        Int              @id(map: "tokens_pk") @default(autoincrement())
  created_at      DateTime         @default(now()) @db.Timestamptz(6)
  enabled         Boolean?         @default(false)
  nickname        String?          @db.VarChar(127)
  access_requests access_requests?
  users           users?           @relation(fields: [nickname], references: [nickname], onDelete: Cascade, map: "tokens_users_null_fk")
}

model users {
  nickname   String     @id(map: "users_pk") @db.VarChar(127)
  email      String     @unique(map: "users_unique") @db.VarChar(255)
  created_at DateTime   @default(now()) @db.Timestamptz(6)
  accounts   accounts[]
  tokens     tokens[]
}

model accounts {
  address  String @id(map: "accounts_pk") @db.VarChar(63)
  name     String @db.VarChar(63)
  nickname String @db.VarChar(127)
  users    users  @relation(fields: [nickname], references: [nickname], onDelete: Cascade, map: "accounts_users_null_fk")

  @@unique([address, name], map: "accounts_address_name_unique")
}
