generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model access_requests {
  token      String      @id(map: "access_requests_pk") @db.VarChar(511)
  socket     String      @db.VarChar(255)
  expire_at  DateTime    @db.Timestamptz(6)
  jwt_id     Int         @unique(map: "access_requests_jwtid_unique")
  tokens     tokens      @relation(fields: [jwt_id], references: [token_id], onDelete: Cascade, map: "access_requests_tokens_null_fk")
  temp_users temp_users?
}

model temp_users {
  token           String          @id(map: "temp_users_pk") @db.VarChar(511)
  nickname        String          @db.VarChar(127)
  email           String          @db.VarChar(255)
  access_requests access_requests @relation(fields: [token], references: [token], onDelete: Cascade, map: "temp_users_access_requests_null_fk")
}

model tokens {
  token_id        Int              @id(map: "tokens_pk") @default(autoincrement())
  created_at      DateTime         @default(now()) @db.Timestamptz(6)
  enabled         Boolean?         @default(false)
  nickname        String?          @db.VarChar(127)
  access_requests access_requests?
  users           users?           @relation(fields: [nickname], references: [nickname], onDelete: Cascade, map: "tokens_users_null_fk")
}

model users {
  nickname                          String             @id(map: "users_pk") @db.VarChar(127)
  email                             String             @unique(map: "users_unique") @db.VarChar(255)
  created_at                        DateTime           @default(now()) @db.Timestamptz(6)
  accounts                          accounts[]
  comments                          comments[]
  follower_follower_followedTousers follower[]         @relation("follower_followedTousers")
  follower_follower_followerTousers follower[]         @relation("follower_followerTousers")
  lists                             lists[]
  post_downvotes                    post_downvotes[]
  post_upvotes                      post_upvotes[]
  posts                             posts[]
  restricted_posts                  restricted_posts[]
  tokens                            tokens[]
}

model accounts {
  address         String           @id(map: "accounts_pk") @db.VarChar(63)
  name            String           @db.VarChar(63)
  nickname        String           @db.VarChar(127)
  account_packets account_packets?
  users           users            @relation(fields: [nickname], references: [nickname], onDelete: Cascade, map: "accounts_users_null_fk")

  @@unique([address, name], map: "accounts_address_name_unique")
}

model account_packets {
  address  String   @id(map: "account_packets_pk") @db.VarChar(63)
  packet   String
  accounts accounts @relation(fields: [address], references: [address], onDelete: Cascade, map: "account_packets_accounts_address_fk")
}

model lists {
  list_id    Int          @id(map: "lists_pk") @default(autoincrement())
  name       String       @db.VarChar(127)
  nickname   String?      @db.VarChar(127)
  users      users?       @relation(fields: [nickname], references: [nickname], onDelete: Cascade, map: "lists_users_null_fk")
  post_lists post_lists[]

  @@unique([nickname, name], map: "lists_name_nickname_unique")
}

model post_contents {
  content_id Int          @id(map: "post_contents_pk") @default(autoincrement())
  position   Int
  post_id    Int
  type       content_type
  content    String
  nft_id     String?      @db.VarChar(255)
  is_nft     Boolean      @default(false)
  posts      posts        @relation(fields: [post_id], references: [post_id], onDelete: Cascade, map: "post_contents_posts_null_fk")

  @@unique([post_id, position], map: "post_contents_position_id_unique")
}

model post_downvotes {
  post_id  Int
  nickname String @db.VarChar(127)
  posts    posts  @relation(fields: [post_id], references: [post_id], onDelete: Cascade, map: "post_downvotes_posts_null_fk")
  users    users  @relation(fields: [nickname], references: [nickname], onDelete: Cascade, map: "post_downvotes_users_null_fk")

  @@id([post_id, nickname], map: "post_downvotes_pk")
}

model post_lists {
  post_id Int
  list_id Int
  lists   lists @relation(fields: [list_id], references: [list_id], onDelete: Cascade, map: "post_lists_lists_null_fk")
  posts   posts @relation(fields: [post_id], references: [post_id], onDelete: Cascade, map: "post_lists_posts_null_fk")

  @@id([post_id, list_id], map: "post_lists_pk")
}

model post_upvotes {
  post_id  Int
  nickname String @db.VarChar(127)
  posts    posts  @relation(fields: [post_id], references: [post_id], onDelete: Cascade, map: "post_upvotes_posts_null_fk")
  users    users  @relation(fields: [nickname], references: [nickname], onDelete: Cascade, map: "post_upvotes_users_null_fk")

  @@id([post_id, nickname], map: "post_upvotes_pk")
}

model posts {
  post_id          Int                @id(map: "posts_pk") @default(autoincrement())
  visibility       String             @default("public") @db.VarChar(63)
  created_at       DateTime           @default(now()) @db.Timestamptz(6)
  nickname         String             @db.VarChar(127)
  comments         comments[]
  nft_backup       nft_backup?
  post_contents    post_contents[]
  post_downvotes   post_downvotes[]
  post_lists       post_lists[]
  post_upvotes     post_upvotes[]
  users            users              @relation(fields: [nickname], references: [nickname], onDelete: SetNull, map: "posts_users_null_fk")
  restricted_posts restricted_posts[]
}

model comments {
  comment_id Int          @id(map: "comments_pk") @default(autoincrement())
  content    String
  type       content_type
  post_id    Int
  nickname   String       @db.VarChar(127)
  posts      posts        @relation(fields: [post_id], references: [post_id], onDelete: NoAction, onUpdate: NoAction, map: "comments_posts_null_fk")
  users      users        @relation(fields: [nickname], references: [nickname], onDelete: NoAction, onUpdate: NoAction, map: "comments_users_null_fk")
}

model restricted_posts {
  post_id  Int
  nickname String @db.VarChar(127)
  posts    posts  @relation(fields: [post_id], references: [post_id], onDelete: Cascade, map: "restricted_posts_posts_null_fk")
  users    users  @relation(fields: [nickname], references: [nickname], onDelete: Cascade, map: "restricted_posts_users_null_fk")

  @@id([post_id, nickname], map: "restricted_posts_pk")
}

model follower {
  follower                       String @db.VarChar(127)
  followed                       String @db.VarChar(127)
  users_follower_followedTousers users  @relation("follower_followedTousers", fields: [followed], references: [nickname], onDelete: Cascade, map: "follower_users_null_followed_fk")
  users_follower_followerTousers users  @relation("follower_followerTousers", fields: [follower], references: [nickname], onDelete: Cascade, map: "follower_users_null_follower_fk")

  @@id([follower, followed], map: "follower_pk")
}

model nft_backup {
  post_id Int    @id(map: "nft_backup_pk")
  nft     Int[]
  ipfs    String @unique(map: "nft_backup_uk") @db.VarChar(127)
  posts   posts  @relation(fields: [post_id], references: [post_id], onDelete: Cascade, map: "nft_backup_posts_fk")
}

enum content_type {
  TEXT
  VIDEO
  PHOTO
  GIF
}
