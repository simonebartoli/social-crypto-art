import React, {useEffect, useState} from 'react';
import {
    Contract_createNft,
    Contract_setRoyalties,
    Contract_setSellingAuction,
    Contract_setSellingFixedPrice
} from "@/contexts/contract";
import {ethers} from "ethers";
import {HardhatProvider, socialNFTContract} from "@/contracts";
import {NextPage} from "next";
import {useEthers} from "@usedapp/core";
import Metamask from "@/components/settings/buttons/metamask";
import WalletConnect from "@/components/settings/buttons/wallet-connect";

type Props = {
    operations: {
        name: string
        estimateFunction: (args: {[id: string]: string | boolean}) => void
        estimate: {
            value: string | undefined
            set: React.Dispatch<React.SetStateAction<string | undefined>>
        }
        disabled: {
            value: boolean
            set: React.Dispatch<React.SetStateAction<boolean>>
        }
        execute: {
            value: boolean
            set: React.Dispatch<React.SetStateAction<boolean>>
        }
        callback: (arg: {[id: string]: string}) => void
        onError: (message: string) => void
        args: Map<string, {
            value: string,
            set: React.Dispatch<React.SetStateAction<string>>
        }>
    }[]

    nft_id?: string
    createNft?: {
        ipfsURI: string
    }
    setRoyalties?: {
        percentage: string
    }
    setSelling?: {
        setSellingFixedPrice?: {
            amount: string,
            currency: string
        }
        setSellingAuction?: {
            initialPrice: string,
            refundable: boolean,
            minIncrement: string,
            currency: string,
            deadline: string
        }
    }
    onFinish: () => void
}

const BlockchainInteraction: NextPage<Props> =
    ({nft_id, createNft, setRoyalties, setSelling, onFinish}) => {
    const {account} = useEthers()

    const [nftId, setNftId] = useState(nft_id)
    const [operations, setOperations] = useState<string[]>([])

    const [estimate_createNft, setEstimate_createNft] = useState<string | undefined>(undefined)
    const [estimate_setRoyalties, setEstimate_setRoyalties] = useState<string | undefined>(undefined)
    const [estimate_setSellingFixedPrice, setEstimate_setSellingFixedPrice] = useState<string | undefined>(undefined)
    const [estimate_setSellingAuction, setEstimate_setSellingAuction] = useState<string | undefined>(undefined)

    const [execute_createNft, setExecute_createNft] = useState(false)
    const [execute_setRoyalties, setExecute_setRoyalties] = useState(false)
    const [execute_setSellingFixedPrice, setExecute_setSellingFixedPrice] = useState(false)
    const [execute_setSellingAuction, setExecute_setSellingAuction] = useState(false)

    const [disabled_createNft, setDisabled_createNft] = useState(false)
    const [disabled_setRoyalties, setDisabled_setRoyalties] = useState(false)
    const [disabled_setSellingFixedPrice, setDisabled_setSellingFixedPrice] = useState(false)
    const [disabled_setSellingAuction, setDisabled_setSellingAuction] = useState(false)

    const getEstimate_createNft = async (ipfs: string) => {
        try{
            const result = (await socialNFTContract.estimateGas.createNft(ipfs)).mul(await HardhatProvider.getGasPrice())
            setEstimate_createNft(ethers.utils.formatEther(result))
        }catch (e) {
            setEstimate_createNft(undefined)
        }
    }
    const getEstimate_setRoyalties = async (nftId: string, royalties: string) => {
        try{
            const result = (await socialNFTContract.estimateGas.setRoyalties(nftId, royalties)).mul(await HardhatProvider.getGasPrice())
            setEstimate_setRoyalties(ethers.utils.formatEther(result))
        }catch (e) {
            setEstimate_setRoyalties(undefined)
        }
    }
    const getEstimate_setSellingFixedPrice = async (nftId: string, amount: string, currency: string) => {
        try{
            const result = (await socialNFTContract.estimateGas.setSellingFixedPrice(nftId, amount, currency)).mul(await HardhatProvider.getGasPrice())
            setEstimate_setSellingFixedPrice(ethers.utils.formatEther(result))
        }catch (e) {
            setEstimate_setSellingFixedPrice(undefined)
        }
    }
    const getEstimate_setSellingAuction = async (nftId: string, initialPrice: string, refundable: boolean, minIncrement: string, currency: string, deadline: string) => {
        try{
            const result = (await socialNFTContract.estimateGas.setSellingAuction(nftId, initialPrice, refundable, minIncrement, currency, deadline)).mul(await HardhatProvider.getGasPrice())
            setEstimate_setSellingAuction(ethers.utils.formatEther(result))
        }catch (e) {
            setEstimate_setSellingAuction(undefined)
        }
    }

    const estimate = async () => {
        if(createNft){
            getEstimate_createNft(createNft.ipfsURI)
        }
        if(nftId){
            if(setRoyalties){
                getEstimate_setRoyalties(nftId, setRoyalties.percentage)
            }
            if(setSelling){
                if(setSelling.setSellingFixedPrice){
                    const {currency, amount} = setSelling.setSellingFixedPrice
                    getEstimate_setSellingFixedPrice(nftId, amount, currency)
                }else if(setSelling.setSellingAuction){
                    const {currency, deadline, initialPrice, refundable, minIncrement} = setSelling.setSellingAuction
                    getEstimate_setSellingAuction(nftId, initialPrice, refundable, minIncrement, currency, deadline)
                }
            }
        }
    }

    useEffect(() => {
        estimate()
        setInterval(() => {
            estimate()
        }, 5000)
    }, [nftId])
    useEffect(() => {
        const newOps = []
        if(createNft){
            newOps.push("CREATION NFT")
        }
        if(setRoyalties){
            newOps.push("SETTING ROYALTIES")
        }
        if(setSelling?.setSellingFixedPrice){
            newOps.push("SETTING SELLING FIXED PRICE")
        }else if(setSelling?.setSellingAuction){
            newOps.push("SETTING SELLING AUCTION")
        }
        setOperations(newOps)
    }, [])
    // ADD NFT TO SERVER WHEN FINISHED
    return (
        <div className="flex flex-col gap-8 items-center justify-start w-3/4">
            {
                createNft &&
                <Contract_createNft
                    callback={(id) => {
                        setDisabled_createNft(true)
                        setNftId(id)
                    }}
                    onError={(message) => {console.log(message)}}
                    execute={execute_createNft}
                    URI={createNft.ipfsURI}
                />
            }
            {
                (setRoyalties && nftId) &&
                <Contract_setRoyalties
                    callback={() => setDisabled_setRoyalties(true)}
                    onError={(message) => {console.log(message)}}
                    execute={execute_setRoyalties}
                    nft_id={nftId}
                    percentage={setRoyalties.percentage}
                />
            }
            {
                (setSelling && setSelling.setSellingFixedPrice && nftId) &&
                <Contract_setSellingFixedPrice
                    callback={() => {
                        setDisabled_setSellingFixedPrice(true)
                        onFinish()
                    }}
                    onError={(message) => {console.log(message)}}
                    execute={execute_setSellingFixedPrice}
                    nft_id={nftId}
                    amount={setSelling.setSellingFixedPrice.amount}
                    currency={setSelling.setSellingFixedPrice.currency}
                />
            }
            {
                (setSelling && setSelling.setSellingAuction && nftId) &&
                <Contract_setSellingAuction
                    callback={() => {
                        setDisabled_setSellingAuction(true)
                        onFinish()
                    }}
                    onError={(message) => {console.log(message)}}
                    execute={execute_setSellingFixedPrice}
                    nft_id={nftId}
                    currency={setSelling.setSellingAuction.currency}
                    deadline={setSelling.setSellingAuction.deadline}
                    initialPrice={setSelling.setSellingAuction.initialPrice}
                    refundable={setSelling.setSellingAuction.refundable}
                    minIncrement={setSelling.setSellingAuction.minIncrement}
                />
            }
            <div className="flex flex-col gap-3 items-center justify-center">
                <h2 className="text-3xl font-bold">Last Step...</h2>
                <p className="text-lg">To create your NFT we need some authorization from you.</p>
                <p className="text-sm italic">
                    Don&apos;t exit before terminating this process as your NFT will not be created
                </p>
            </div>
            <div className="w-full flex flex-col items-center justify-center gap-6">
                <div className="flex flex-col items-center justify-center gap-2 p-4 bg-custom-grey text-white rounded-lg w-full">
                    <span className="text-xl font-bold">
                        {
                            `${operations.length} AUTHORIZATION WILL BE PROMPTED`
                        }
                    </span>
                    <span>
                        {
                            operations.map((_, index) => {
                                return index < operations.length - 1 ? (
                                    <span key={index}>{_} + </span>
                                ) : (<span key={index}>{_}</span>)
                            })
                        }
                    </span>
                </div>
                {
                    operations.length > 0 &&
                    <div className="flex flex-col items-center justify-center gap-4 bg-custom-light-grey p-4 rounded-lg">
                        <h2 className="text-xl text-custom-red">Cost Involved</h2>
                        <div className="grid grid-cols-2 gap-x-6 gap-3">
                            {
                                createNft &&
                                <>
                                    <span className="text-center">CREATING NFT: </span>
                                    <span className="text-center">
                                    {
                                        estimate_createNft ? `~${estimate_createNft} ETH` : "Calculating..."
                                    }
                                    </span>
                                </>
                            }
                            {
                                setRoyalties &&
                                <>
                                    <span className="text-center">SETTING ROYALTIES NFT: </span>
                                    <span className="text-center">
                                    {
                                        estimate_setRoyalties ? `~${estimate_setRoyalties} ETH` : "Calculating..."
                                    }
                                    </span>
                                </>
                            }
                            {
                                setSelling?.setSellingFixedPrice &&
                                <>
                                    <span className="text-center">SETTING SELLING FIXED PRICE NFT: </span>
                                    <span className="text-center">
                                    {
                                        estimate_setSellingFixedPrice ? `~${estimate_setSellingFixedPrice} ETH` : "Calculating..."
                                    }
                                    </span>
                                </>
                            }
                            {
                                setSelling?.setSellingAuction &&
                                <>
                                    <span className="text-center">SETTING SELLING AUCTION NFT: </span>
                                    <span className="text-center">
                                    {
                                        estimate_setSellingAuction ? `~${estimate_setSellingAuction} ETH` : "Calculating..."
                                    }
                                    </span>
                                </>
                            }
                        </div>
                    </div>
                }
            </div>
            {
                account ?
                    <div className="mb-8 flex flex-col gap-4 w-full">
                        {
                            createNft &&
                            <button disabled={disabled_createNft}
                                    onClick={() => setExecute_createNft(true)}
                                    className="disabled:bg-custom-light-grey disabled:cursor-not-allowed disabled:text-black hover:bg-white hover:text-black transition text-lg bg-black text-white border-[1px] border-black p-4 w-full rounded-lg">
                                Create NFT
                            </button>
                        }
                        {
                            (setRoyalties && nftId) &&
                            <button disabled={disabled_setRoyalties}
                                    onClick={() => setExecute_setRoyalties(true)}
                                    className="disabled:bg-custom-light-grey disabled:cursor-not-allowed disabled:text-black hover:bg-white hover:text-black transition text-lg bg-black text-white border-[1px] border-black p-4 w-full rounded-lg">
                                Set Royalties
                            </button>
                        }
                        {
                            (setSelling && setSelling.setSellingFixedPrice && nftId) &&
                            <button disabled={disabled_setSellingFixedPrice}
                                    onClick={() => setExecute_setSellingFixedPrice(true)}
                                    className="disabled:bg-custom-light-grey disabled:cursor-not-allowed disabled:text-black hover:bg-white hover:text-black transition text-lg bg-black text-white border-[1px] border-black p-4 w-full rounded-lg">
                                Set Selling Fixed Price
                            </button>
                        }
                        {
                            (setSelling && setSelling.setSellingAuction && nftId) &&
                            <button disabled={disabled_setSellingAuction}
                                    onClick={() => setExecute_setSellingAuction(true)}
                                    className="disabled:bg-custom-light-grey disabled:cursor-not-allowed disabled:text-black hover:bg-white hover:text-black transition text-lg bg-black text-white border-[1px] border-black p-4 w-full rounded-lg">
                                Set Selling Auction
                            </button>
                        }
                    </div> :
                    <div className="flex flex-col gap-4 w-full">
                        <Metamask/>
                        <WalletConnect/>
                    </div>
            }
        </div>
    );
};

export default BlockchainInteraction;